import match_sim
import match_state
import team
import player
import stats
import yaml

def adjust_batting_stats(pl):
    stat = pl.batting_stats
    stat.matches_played -= 1
    if pl.balls_played > 0:
        stat.batt_innings -= 1
    stat.not_outs -= pl.is_batting
    stat.runs_scored -= pl.runs_scored
    stat.average = round(stat.runs_scored/(stat.batt_innings-stat.not_outs),2)
    stat.balls_faced -= pl.balls_played
    if pl.runs_scored >= 100:
        stat.centuries -= 1
    if pl.runs_scored >= 50:
        stat.fifties -= 1
    stat.fours -= pl.num_fours
    stat.sixes -= pl.num_sixes

def adjust_bowling_stats(pl):
    econ_dict = {1:0.16,2:0.33,3:0.50,4:0.66,5:0.83}
    stat = pl.bowling_stats
    stat.matches_played -= 1
    if pl.balls_bowled > 0:
        stat.bowl_innings -= 1
    stat.balls_bowled -= pl.balls_bowled
    stat.calculate_overs_bowled()
    stat.runs_conceded -= pl.runs_conceded
    stat.average = round(stat.runs_conceded/stat.wickets_taken,2)
    i,d = divmod(stat.overs_bowled,1)
    stat.economy = round(stat.runs_conceded/(i + econ_dict[10*d]),2)
    if pl.wickets_taken == 4:
        stat.fourwi -= 1
    if pl.wickets_taken > 4:
        stat.fivewi -= 1

def adjust_player_stats(pl):
    adjust_batting_stats(pl)
    adjust_bowling_stats(pl)

def adjust_team_stats(team):
    for pl in team.player_list:
        adjust_player_stats(pl)

def adjust_match_stats(matchState):
    adjust_team_stats(matchState.team_a)
    adjust_team_stats(matchState.team_b)

def yaml_dump(filepath,data):
    with open(filepath,"w") as file_descriptor:
        yaml.dump(data,file_descriptor)

def write_to_yaml(f_name,state):
    team_a_name = state.team_a.name
    team_b_name = state.team_b.name
    data_yaml = {team_a_name:[{'batting averages':[]},{'bowling averages':[]}],team_b_name:[{'batting averages':[]},{'bowling averages':[]}]}

    team_a_bat_stats = data_yaml[team_a_name][0]['batting averages']
    team_b_bat_stats = data_yaml[team_b_name][0]['batting averages']
    team_a_bowl_stats = data_yaml[team_a_name][1]['bowling averages']
    team_b_bowl_stats = data_yaml[team_b_name][1]['bowling averages']

    for pl in state.team_a.player_list:
        team_a_bat_stats.append(bat_pl_dict(pl))

    for pl in state.team_b.player_list:
        team_b_bat_stats.append(bat_pl_dict(pl))


def bat_pl_dict(pl):
    pl_dict = {}
    pl_dict['100'] = str(pl.batting_stats.centuries)
    pl_dict['4s'] = str(pl.batting_stats.fours)
    pl_dict['50'] = str(pl.batting_stats.fifties)
    pl_dict['6s'] = str(pl.batting_stats.sixes)
    pl_dict['Ave'] = str(pl.batting_stats.average)
    pl_dict['BF'] = str(pl.batting_stats.balls_faced)
    pl_dict['Inns'] = str(pl.batting_stats.batt_innings)
    pl_dict['Mat'] = str(pl.batting_stats.matches_played)
    pl_dict['NO'] = str(pl.batting_stats.not_outs)
    pl_dict['Player'] = pl.name
    pl_dict['Runs'] = str(pl.batting_stats.runs_scored)
    return pl_dict

def bowl_pl_dict(pl):
    pl_dict = {}
    pl_dict['4'] = str(pl.bowling_stats.fourwi)
    pl_dict['5'] = str(pl.bowling_stats.fivewi)
    pl_dict['Ave'] = str(pl.bowling_stats.average)
    pl_dict['Econ'] = str(pl.bowling_stats.economy)
    pl_dict['Mat'] = str(pl.bowling_stats.matches_played)
    pl_dict['Inns'] = str(pl.bowling_stats.bowl_innings)
    pl_dict['Overs'] = str(pl.bowling_stats.overs_bowled)
    pl_dict['Player'] = pl.name
    pl_dict['Runs'] = str(pl.bowling_stats.runs_conceded)
    pl_dict['Wkts'] = str(pl.bowling_stats.wickets_taken)
    return pl_dict
